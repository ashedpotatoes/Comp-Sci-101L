# name: Ashton Weeks
# awy9n@umsystem.edu
# Algorithm:
# three functions: one to print menu, one to calculate values based on a list passed as a parameter, and one to print results
# print results prints the header, formatted, as well as a tuple of the returned values from the calculations function
# calculation function also replaces empty values with n/a -- works when both lists are empty or only one
# after that it gets information and lists from the user -- but then clears and also deletes a certain value based on their pick
# works with lower & uppercase q 
# 'd' which prints menu, checks to see if the length is 0 because i calculated weighted grade independently. i stored 
# temp variables to calculate it, so it wasn't using 'n/a' for a math equation & so it didn't call the 
# function value again, but the function value passes through normally if the length of the list is > 0

import math

def printmenu():
  print('{:^35}'.format("Grade Menu"))
  print('1 - Add Test\n2 - Remove Test\n3 - Clear Tests\n4 - Add Assignment\n5 - Remove Assignment\n6 - Clear Assignments\nD - Display Scores\nQ - Quit')

def calculations(alist):
  number = int(len(alist))
  if number > 0:
    themin = min(alist)
    themax = max(alist)
    thesum = 0
    for i in alist:
      thesum += i
    average = round(thesum /number, 2)
    stsum = 0
    for j in alist:
      stsum += ((j - average) ** 2)
    setup = stsum / number
    std = round(math.sqrt(setup),2)
  if number == 0:
    themin = 'n/a'
    themax = 'n/a'
    thesum = 'n/a'
    average = 'n/a'
    std = 'n/a'
  return number, themin, themax, average, std

def printresults(list1, list2):
  print('{:<10}{:>10}{:>10}{:>10}{:>10}{:>10}'.format('Type', '#', 'min', 'max', 'avg', 'std'))
  print('=' * 60)
  # format everything except len to two devimal places
  calculations(list1)
  print('{:<10}{:>10}{:>10}{:>10}{:>10}{:>10}'.format('Tests', calculations(list1)[0], calculations(list1)[1], calculations(list1)[2], calculations(list1)[3], calculations(list1)[4]))
  calculations(list2)
  print('{:<10}{:>10}{:>10}{:>10}{:>10}{:>10}'.format('Programs', calculations(list2)[0], calculations(list2)[1], calculations(list2)[2], calculations(list2)[3], calculations(list2)[4]))

tests = []
programs = []
while True:
  printmenu()
  userchoice = input('\n==> ')
  if userchoice == '1':
    testscore = float(input("Enter the new Test score 0-100 ==> "))
    if 0< testscore <= 100:
      tests.append(testscore)
  if userchoice == '2':
    scoretoremove = float(input("Enter the Test to remove 0-100 ==> "))
    if scoretoremove not in tests:
      print("Could not find value to remove")
    if scoretoremove in tests:
        tests.remove(scoretoremove)
  if userchoice == '3':
    tests.clear()
  if userchoice == '4':
    programscore = float(input("Enter the new Assignment score 0-100 ==> "))
    if 0< programscore:
      programs.append(programscore)
  if userchoice == '5':
    programtoremove = float(input("Enter the Assignment to remove 0-100 ==> "))
    if programtoremove not in programs:
      print("Could not find value to remove")
    if programtoremove in programs:
      programs.remove(programtoremove)
  if userchoice == '6':
    programs.clear()
  if userchoice.upper() == 'D':
    printresults(tests, programs)
    temp = calculations(tests)[3]
    temp2 = calculations(programs)[3]
    if len(tests) == 0:
      temp = 0
    if len(programs) == 0:
      temp2 = 0
    weighted = (temp * .6) + (temp2 * .4)
    print("The weighted scores is {:.2f}".format(weighted))
  if userchoice.upper() == 'Q':
    break
  print()
